{"version":3,"sources":["js/audio_visualizer.js"],"names":["visualize","audio","load","play","context","AudioContext","src","createMediaElementSource","analyser","createAnalyser","canvas","document","getElementById","width","window","innerWidth","height","innerHeight","ctx","getContext","connect","destination","fftSize","bufferLength","frequencyBinCount","console","log","dataArray","barHeight","Uint8Array","WIDTH","HEIGHT","barWidth","x","renderFrame","requestAnimationFrame","getByteFrequencyData","fillStyle","fillRect","i","r","g"],"mappings":";AAwDC,aAvDe,SAASA,EAAWC,GAChCA,EAAMC,OACND,EAAME,OACFC,IAAAA,EAAU,IAAIC,aACdC,EAAMF,EAAQG,yBAAyBN,GACvCO,EAAWJ,EAAQK,iBAEnBC,EAASC,SAASC,eAAe,UACrCF,EAAOG,MAAQC,OAAOC,WACtBL,EAAOM,OAASF,OAAOG,YACnBC,IAAAA,EAAMR,EAAOS,WAAW,MAE5Bb,EAAIc,QAAQZ,GACZA,EAASY,QAAQhB,EAAQiB,aAEzBb,EAASc,QAAU,IAEfC,IAAAA,EAAef,EAASgB,kBAC5BC,QAAQC,IAAIH,GAERI,IAMAC,EANAD,EAAY,IAAIE,WAAWN,GAE3BO,EAAQpB,EAAOG,MACfkB,EAASrB,EAAOM,OAEhBgB,EAAYF,EAAQP,EAAgB,IAEpCU,EAAI,EA0BRhC,EAAME,OAxBG+B,SAAAA,IACLC,sBAAsBD,GAEtBD,EAAI,EAEJzB,EAAS4B,qBAAqBT,GAE9BT,EAAImB,UAAY,OAChBnB,EAAIoB,SAAS,EAAG,EAAGR,EAAOC,GAErB,IAAA,IAAIQ,EAAI,EAAGA,EAAIhB,EAAcgB,IAAK,CAG/BC,IAAAA,GAFJZ,EAAYD,EAAUY,IAEKA,EAAIhB,EAAV,GACjBkB,EAAWF,EAAIhB,EAAX,IAGRL,EAAImB,UAAY,OAASG,EAAI,IAAMC,EAAI,OACvCvB,EAAIoB,SAASL,EAAGF,EAASH,EAAWI,EAAUJ,GAE9CK,GAAKD,EAAW,GAKxBE,GACH,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA","file":"audio_visualizer.75870f76.map","sourceRoot":"../src","sourcesContent":["\n export default function visualize (audio) {\n    audio.load();\n    audio.play();\n    var context = new AudioContext();\n    var src = context.createMediaElementSource(audio);\n    var analyser = context.createAnalyser();\n\n    var canvas = document.getElementById(\"canvas\");\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    var ctx = canvas.getContext(\"2d\");\n\n    src.connect(analyser);\n    analyser.connect(context.destination);\n\n    analyser.fftSize = 256;\n\n    var bufferLength = analyser.frequencyBinCount;\n    console.log(bufferLength);\n\n    var dataArray = new Uint8Array(bufferLength);\n\n    var WIDTH = canvas.width;\n    var HEIGHT = canvas.height;\n\n    var barWidth = (WIDTH / bufferLength) * 2.5;\n    var barHeight;\n    var x = 0;\n\n    function renderFrame() {\n        requestAnimationFrame(renderFrame);\n\n        x = 0;\n\n        analyser.getByteFrequencyData(dataArray);\n\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n        for (var i = 0; i < bufferLength; i++) {\n            barHeight = dataArray[i];\n\n            var r = barHeight + (25 * (i / bufferLength));\n            var g = 250 * (i / bufferLength);\n            var b = 50;\n\n            ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n            ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n\n            x += barWidth + 1;\n        }\n    }\n\n    audio.play();\n    renderFrame();\n}\n"]}